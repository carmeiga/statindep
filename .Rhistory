plot(z3,condmean3,type='l',main='Bi-207 en negro resta en verde',xlab='Channel',ylab='Contas por segundo')
lines(z2,condmean3-exp(escalado)+1,type='l',col='green')
dev.off()
x=log(condmean3+1)[z3>460 & z3<480]
y=log(condmean2+1)[z3>460 & z3<480]
plot(x~y)
mod=lm(x~y-1)
abline(mod)
library(readr)
astar_aire <- read_delim("C:/Users/Carlos M Garcia/Dropbox/alphabeta/astar_aire.txt",
"\t", escape_double = FALSE, col_names = FALSE,
col_types = cols(X3 = col_skip()), trim_ws = TRUE)
View(astar_aire)
astar_aire <- as.data.frame(read_delim("C:/Users/Carlos M Garcia/Dropbox/alphabeta/astar_aire.txt",
"\t", escape_double = FALSE, col_names = FALSE,
col_types = cols(X3 = col_skip()), trim_ws = TRUE))
View(astar_aire)
par(mfrow=c(1,2))
#bw <- npregbw(-enerxias~profmas,nmulti = 5,bwtype='adaptive_nn')
plot(enerxias~profmas,ylab='Enerxía (keV)',xlab='Profundidade másica (kg/m^2)')
barras_de_erro(profmas,enerxias,sigma* 0.63874,1)
res=smooth.spline(profmas, enerxias)
res2=smooth.spline(profmas, -enerxias)
lines(res,lwd=2)
derivada=predict(res2,seq(0,max(profmas),0.01), deriv = 1)
plot(derivada,type='l',lwd=2,xlab='Profundidade másica (kg/m^2)',ylab='Poder de freado (keV/(kg/m^2))')
derivadapuntos=predict(res2,profmas, deriv = 1)
points(derivadapuntos)
barras_de_erro(derivadapuntos$x,derivadapuntos$y,errosbragg,1)
imin=5900
imax=6600
pea=numeric(10)
dat=confianza_todos[[1]]
z <- unlist(dat$r1$eval,use.names = F)[imin:imax]
z=as.numeric(predict(modinv,newdata=data.frame(xvar=z)))
ub=as.numeric(dat$r1$merr[imin:imax,2])
lb=as.numeric(dat$r1$merr[imin:imax,1])
condmean=as.numeric(dat$r1$mean[imin:imax])
pea[1]=z[which.max(condmean)]
plot(z,condmean,col = alpha('black', 0.05),
type='l',ylim=c(0,0.005),ylab='Contas por segundo',xlab='Enerxía calibrada (keV)')
#lines(z,condmean+ub/2,col=1,type='l',lty='dotted')
#lines(z,condmean+lb/2,col=1,type='l',lty='dotted')
#polygon(c(z,rev(z)),c(condmean+ub,rev(condmean+lb)),col=2)
for(p in 2:10) {
dat=confianza_todos[[p]]
#z <- unlist(dat$r1$eval,use.names = F)[imin:imax]
ub=as.numeric(dat$r1$merr[imin:imax,2])
lb=as.numeric(dat$r1$merr[imin:imax,1])
condmean=as.numeric(dat$r1$mean[imin:imax])
#plot(z,condmean,type='l',col=2)
pea[p]=z[which.max(condmean)]
lines(z,condmean,type='l',col = alpha('black', cores[p]))
#polygon(c(z,rev(z)),c(condmean+ub/2,rev(condmean+lb/2)),col=colores[p])
#lines(z,condmean+ub/2,col=1,type='l',lty='dotted')
# lines(z,condmean+lb/2,col=1,type='l',lty='dotted')
}
cores=rank(abs(pres))/10
rug(pea,ticksize = 0.1,lwd=2,col='brown3')
library(RColorBrewer)
imin=5900
imax=6600
pea=numeric(10)
dat=confianza_todos[[1]]
z <- unlist(dat$r1$eval,use.names = F)[imin:imax]
z=as.numeric(predict(modinv,newdata=data.frame(xvar=z)))
ub=as.numeric(dat$r1$merr[imin:imax,2])
lb=as.numeric(dat$r1$merr[imin:imax,1])
condmean=as.numeric(dat$r1$mean[imin:imax])
pea[1]=z[which.max(condmean)]
plot(z,condmean,col = alpha('black', 0.05),
type='l',ylim=c(0,0.005),ylab='Contas por segundo',xlab='Enerxía calibrada (keV)')
#lines(z,condmean+ub/2,col=1,type='l',lty='dotted')
#lines(z,condmean+lb/2,col=1,type='l',lty='dotted')
#polygon(c(z,rev(z)),c(condmean+ub,rev(condmean+lb)),col=2)
for(p in 2:10) {
dat=confianza_todos[[p]]
#z <- unlist(dat$r1$eval,use.names = F)[imin:imax]
ub=as.numeric(dat$r1$merr[imin:imax,2])
lb=as.numeric(dat$r1$merr[imin:imax,1])
condmean=as.numeric(dat$r1$mean[imin:imax])
#plot(z,condmean,type='l',col=2)
pea[p]=z[which.max(condmean)]
lines(z,condmean,type='l',col = alpha('black', cores[p]))
#polygon(c(z,rev(z)),c(condmean+ub/2,rev(condmean+lb/2)),col=colores[p])
#lines(z,condmean+ub/2,col=1,type='l',lty='dotted')
# lines(z,condmean+lb/2,col=1,type='l',lty='dotted')
}
cores=rank(abs(pres))/10
rug(pea,ticksize = 0.1,lwd=2,col='brown3')
imin=5900
imax=6600
pea=numeric(10)
dat=confianza_todos[[1]]
z <- unlist(dat$r1$eval,use.names = F)[imin:imax]
z=as.numeric(predict(modinv,newdata=data.frame(xvar=z)))
ub=as.numeric(dat$r1$merr[imin:imax,2])
lb=as.numeric(dat$r1$merr[imin:imax,1])
condmean=as.numeric(dat$r1$mean[imin:imax])
pea[1]=z[which.max(condmean)]
plot(z,condmean,col = alpha('black', 0.05),
type='l',ylim=c(0,0.005),ylab='Contas por segundo',xlab='Enerxía calibrada (keV)')
#lines(z,condmean+ub/2,col=1,type='l',lty='dotted')
#lines(z,condmean+lb/2,col=1,type='l',lty='dotted')
#polygon(c(z,rev(z)),c(condmean+ub,rev(condmean+lb)),col=2)
for(p in 2:10) {
dat=confianza_todos[[p]]
#z <- unlist(dat$r1$eval,use.names = F)[imin:imax]
ub=as.numeric(dat$r1$merr[imin:imax,2])
lb=as.numeric(dat$r1$merr[imin:imax,1])
condmean=as.numeric(dat$r1$mean[imin:imax])
#plot(z,condmean,type='l',col=2)
pea[p]=z[which.max(condmean)]
lines(z,condmean,type='l',col = alpha('black', cores[p]))
#polygon(c(z,rev(z)),c(condmean+ub/2,rev(condmean+lb/2)),col=colores[p])
#lines(z,condmean+ub/2,col=1,type='l',lty='dotted')
# lines(z,condmean+lb/2,col=1,type='l',lty='dotted')
}
cores=rank(abs(pres))/10
rug(pea,ticksize = 0.1,lwd=2,col='brown3')
imin=5900
imax=6600
pea=numeric(10)
dat=confianza_todos[[1]]
z <- unlist(dat$r1$eval,use.names = F)[imin:imax]
z=as.numeric(predict(modinv,newdata=data.frame(xvar=z)))
ub=as.numeric(dat$r1$merr[imin:imax,2])
lb=as.numeric(dat$r1$merr[imin:imax,1])
condmean=as.numeric(dat$r1$mean[imin:imax])
pea[1]=z[which.max(condmean)]
plot(z,condmean,col = alpha('black', 0.05),
type='l',ylim=c(0,0.005),ylab='Contas por segundo',xlab='Enerxía calibrada (keV)')
#lines(z,condmean+ub/2,col=1,type='l',lty='dotted')
#lines(z,condmean+lb/2,col=1,type='l',lty='dotted')
#polygon(c(z,rev(z)),c(condmean+ub,rev(condmean+lb)),col=2)
for(p in 2:10) {
dat=confianza_todos[[p]]
#z <- unlist(dat$r1$eval,use.names = F)[imin:imax]
ub=as.numeric(dat$r1$merr[imin:imax,2])
lb=as.numeric(dat$r1$merr[imin:imax,1])
condmean=as.numeric(dat$r1$mean[imin:imax])
#plot(z,condmean,type='l',col=2)
pea[p]=z[which.max(condmean)]
lines(z,condmean,type='l',col = alpha('black', cores[p]))
#polygon(c(z,rev(z)),c(condmean+ub/2,rev(condmean+lb/2)),col=colores[p])
#lines(z,condmean+ub/2,col=1,type='l',lty='dotted')
# lines(z,condmean+lb/2,col=1,type='l',lty='dotted')
}
cores=rank(abs(pres))/10
rug(pea,ticksize = 0.1,lwd=2,col='brown3')
library(colorspace)
imin=5900
imax=6600
pea=numeric(10)
dat=confianza_todos[[1]]
z <- unlist(dat$r1$eval,use.names = F)[imin:imax]
z=as.numeric(predict(modinv,newdata=data.frame(xvar=z)))
ub=as.numeric(dat$r1$merr[imin:imax,2])
lb=as.numeric(dat$r1$merr[imin:imax,1])
condmean=as.numeric(dat$r1$mean[imin:imax])
pea[1]=z[which.max(condmean)]
plot(z,condmean,col = alpha('black', 0.05),
type='l',ylim=c(0,0.005),ylab='Contas por segundo',xlab='Enerxía calibrada (keV)')
#lines(z,condmean+ub/2,col=1,type='l',lty='dotted')
#lines(z,condmean+lb/2,col=1,type='l',lty='dotted')
#polygon(c(z,rev(z)),c(condmean+ub,rev(condmean+lb)),col=2)
for(p in 2:10) {
dat=confianza_todos[[p]]
#z <- unlist(dat$r1$eval,use.names = F)[imin:imax]
ub=as.numeric(dat$r1$merr[imin:imax,2])
lb=as.numeric(dat$r1$merr[imin:imax,1])
condmean=as.numeric(dat$r1$mean[imin:imax])
#plot(z,condmean,type='l',col=2)
pea[p]=z[which.max(condmean)]
lines(z,condmean,type='l',col = alpha('black', cores[p]))
#polygon(c(z,rev(z)),c(condmean+ub/2,rev(condmean+lb/2)),col=colores[p])
#lines(z,condmean+ub/2,col=1,type='l',lty='dotted')
# lines(z,condmean+lb/2,col=1,type='l',lty='dotted')
}
cores=rank(abs(pres))/10
rug(pea,ticksize = 0.1,lwd=2,col='brown3')
library(scales)
imin=5900
imax=6600
pea=numeric(10)
dat=confianza_todos[[1]]
z <- unlist(dat$r1$eval,use.names = F)[imin:imax]
z=as.numeric(predict(modinv,newdata=data.frame(xvar=z)))
ub=as.numeric(dat$r1$merr[imin:imax,2])
lb=as.numeric(dat$r1$merr[imin:imax,1])
condmean=as.numeric(dat$r1$mean[imin:imax])
pea[1]=z[which.max(condmean)]
plot(z,condmean,col = alpha('black', 0.05),
type='l',ylim=c(0,0.005),ylab='Contas por segundo',xlab='Enerxía calibrada (keV)')
#lines(z,condmean+ub/2,col=1,type='l',lty='dotted')
#lines(z,condmean+lb/2,col=1,type='l',lty='dotted')
#polygon(c(z,rev(z)),c(condmean+ub,rev(condmean+lb)),col=2)
for(p in 2:10) {
dat=confianza_todos[[p]]
#z <- unlist(dat$r1$eval,use.names = F)[imin:imax]
ub=as.numeric(dat$r1$merr[imin:imax,2])
lb=as.numeric(dat$r1$merr[imin:imax,1])
condmean=as.numeric(dat$r1$mean[imin:imax])
#plot(z,condmean,type='l',col=2)
pea[p]=z[which.max(condmean)]
lines(z,condmean,type='l',col = alpha('black', cores[p]))
#polygon(c(z,rev(z)),c(condmean+ub/2,rev(condmean+lb/2)),col=colores[p])
#lines(z,condmean+ub/2,col=1,type='l',lty='dotted')
# lines(z,condmean+lb/2,col=1,type='l',lty='dotted')
}
cores=rank(abs(pres))/10
rug(pea,ticksize = 0.1,lwd=2,col='brown3')
imin=5900
imax=6600
pea=numeric(10)
dat=confianza_todos[[1]]
z <- unlist(dat$r1$eval,use.names = F)[imin:imax]
z=as.numeric(predict(modinv,newdata=data.frame(xvar=z)))
ub=as.numeric(dat$r1$merr[imin:imax,2])
lb=as.numeric(dat$r1$merr[imin:imax,1])
condmean=as.numeric(dat$r1$mean[imin:imax])
pea[1]=z[which.max(condmean)]
plot(z,condmean,col = alpha('black', 0.05),
type='l',ylim=c(0,0.005),ylab='Contas por segundo',xlab='Enerxía calibrada (keV)')
#lines(z,condmean+ub/2,col=1,type='l',lty='dotted')
#lines(z,condmean+lb/2,col=1,type='l',lty='dotted')
#polygon(c(z,rev(z)),c(condmean+ub,rev(condmean+lb)),col=2)
for(p in 2:10) {
dat=confianza_todos[[p]]
#z <- unlist(dat$r1$eval,use.names = F)[imin:imax]
ub=as.numeric(dat$r1$merr[imin:imax,2])
lb=as.numeric(dat$r1$merr[imin:imax,1])
condmean=as.numeric(dat$r1$mean[imin:imax])
#plot(z,condmean,type='l',col=2)
pea[p]=z[which.max(condmean)]
lines(z,condmean,type='l',col = alpha('black', cores[p]))
#polygon(c(z,rev(z)),c(condmean+ub/2,rev(condmean+lb/2)),col=colores[p])
#lines(z,condmean+ub/2,col=1,type='l',lty='dotted')
# lines(z,condmean+lb/2,col=1,type='l',lty='dotted')
}
cores=rank(abs(pres))/10
rug(pea,ticksize = 0.1,lwd=2,col='brown3')
load("C:/Users/Carlos M Garcia/Dropbox/alphabeta/fermi.Rdata.RData")
enerxias
profmas=densi*0.02535
library(np)
plot(enerxias~profmas,ylab='Enerxía (keV)',xlab='Profundidade másica (kg/m^2)')
plot(enerxias~profmas,ylab='Enerxía (keV)',xlab='Profundidade másica (kg/m^2)')
barras_de_erro(profmas,enerxias,sigma* 0.63874,1)
res=smooth.spline(profmas, enerxias)
res2=smooth.spline(profmas, -enerxias)
lines(res,lwd=2)
derivada=predict(res2,seq(0,max(profmas),0.01), deriv = 1)
plot(derivada,type='l',lwd=2,xlab='Profundidade másica (kg/m^2)',ylab='Poder de freado (keV/(kg/m^2))')
derivadapuntos=predict(res2,profmas, deriv = 1)
points(derivadapuntos)
barras_de_erro(derivadapuntos$x,derivadapuntos$y,errosbragg,1)
estar_silicon
astar_aire
profmas
pm=profmas/10
pm=profmas/10
pm[1]=0
pm
paso=0.001
which.min(abs(astar_aire[,1]-(eacum[k])))
e0=6.118
eacum[k]=e0
e0=6.118
eacum[1]=e0
pm=0
tramos=0
which.min(abs(astar_aire[,1]-(eacum[k])))
eacum=numeric()
eacum=numeric(length(es))
tramos=0
paso=0.001
eacum=numeric()
e0=6.118
eacum[1]=e0
pm=0
tramos=0
while(pm<0.1) {
dedx=astar_aire[which.min(abs(astar_aire[,1]-(eacum[k]))),2]
eacum[k+1]=(eacum[k]-dedx*paso)
pm=pm+paso
tramos=tramos+1
k=k+1
}
k=1
while(pm<0.1) {
dedx=astar_aire[which.min(abs(astar_aire[,1]-(eacum[k]))),2]
eacum[k+1]=(eacum[k]-dedx*paso)
pm=pm+paso
tramos=tramos+1
k=k+1
}
plot(eacum)
eacum=numeric()
eacum=0
eacum=numeric(length(es))
tramos=0
paso=0.001
eacum=numeric()
eacum=0
e0=6.118
eacum[1]=e0
pm=0
tramos=0
k=1
while(pm<0.1) {
dedx=astar_aire[which.min(abs(astar_aire[,1]-(eacum[k]))),2]
eacum[k+1]=(eacum[k]-dedx*paso)
pm=pm+paso
tramos=tramos+1
k=k+1
}
tramos
plot(eacum)
eacum
prom=profmas/10
prom[1]=0
prom
range(prom)
pres=c(-8,156.5,529,785,959.5,989.5,333,666,838,907)[colocacion]
M=0.02896 #kg/mol
pnewm2=pres*100
R=8.31446261815324
densi=pnewm2*M/(R*293)
profmas=densi*0.02535
prom=profmas/10
prom[1]=0
range(prom)
tramos=0
paso=0.00001
eacum=numeric()
eacum=0
e0=6.118
eacum[1]=e0
pm=numeric()
pm=0
tramos=0
k=1
while(pm<0.003) {
dedx=astar_aire[which.min(abs(astar_aire[,1]-(eacum[k]))),2]
eacum[k+1]=(eacum[k]-dedx*paso)
pm[k+1]=pm[k]+paso
tramos=tramos+1
k=k+1
}
tramos=0
paso=0.00001
eacum=numeric()
eacum=0
e0=6.118
eacum[1]=e0
pm=numeric()
pm=0
tramos=0
k=1
while(pm[k]<0.003) {
dedx=astar_aire[which.min(abs(astar_aire[,1]-(eacum[k]))),2]
eacum[k+1]=(eacum[k]-dedx*paso)
pm[k+1]=pm[k]+paso
tramos=tramos+1
k=k+1
}
pm
plot(eacum~pm)
enerxias
plot(eacum~pm)
points(prom, -enerxias/1000, cex=.2, col="red")
plot(eacum~pm)
points(prom, -enerxias/1000, cex=.2, col="red")
-enerxias/1000,
-enerxias/1000
plot(eacum~pm)
points(prom, enerxias/1000, cex=2, col="red")
plot(eacum~pm)
points(prom, enerxias/1000, cex=2, col="red")
teor=numeric()
for(i in 1:length(prom))
teor[i]=eacum[which.min(abs(pm-prom))]
for(i in 1:length(prom))
teor[i]=eacum[which.min(abs(pm-prom[i]))]
plot(teor~prom)
enorm=enerxias/1000
plot(teor~prom)
lm(teor~enorm)
plot(teor~enorm)
modastar=lm(teor~enorm)
abline(modastar)
predict(modastar,newdata=data.frame(acum))
predict(modastar,newdata=data.frame(eacum))
predict(modastar,newdata=data.frame(teor=eacum))
modastar=lm(enorm~teor)
predict(modastar,newdata=data.frame(teor=eacum))
astar=predict(modastar,newdata=data.frame(teor=eacum))
plot(astar~pm)
points(prom, enerxias/1000, cex=2, col="red")
plot(astar~pm,type='l')
points(prom, enerxias/1000, cex=1, col="red")
knitr::opts_chunk$set(echo = TRUE)
```{r}
library(randomForest)
library(keras)
install.packages("keras")
library(randomForest)
library(keras)
show_digit = function(img){
img = t( apply(img, 2, rev) )
image( img )
}
mnist <- dataset_mnist()
install_tensorflow()
install.packages("tensorflow")
library(tensorflow)
library(tensorflow)
mnist <- dataset_mnist()
install_tensorflow()
mnist <- dataset_mnist()
load("C:/Users/Carlos M Garcia/Dropbox/wences/CODIGO/matlab_crosscov/gretton/finais_resposta.csv")
library(readr)
finais_resposta <- read_csv("C:/Users/Carlos M Garcia/Dropbox/wences/CODIGO/matlab_crosscov/gretton/finais_resposta.csv")
View(finais_resposta)
nomesmateriais <- read.table("C:/Users/Carlos M Garcia/Dropbox/wences/metricas/nomesmateriais.txt", quote="\"", comment.char="")
View(nomesmateriais)
View(nomesmateriais)
sub("\\_.*", "", nomesmateriais)
sub("\\_.*", "", nomesmateriais[1])
sub("\\_.*", "", nomesmateriais[1])
sub("\\_.*", "", nomesmateriais[1])
sub("\\_.*", "", nomesmateriais[1])
sub("\\_.*", "", nomesmateriais[1])
View(nomesmateriais)
nomesmateriais
sub("\\_.*", "",nomesmateriais$V1 )
nomes=sub("\\_.*", "",nomesmateriais$V1 )
nomes=sub("\\_.*", "",nomesmateriais$V1 )
nomesdata=data.frame(nom=nomes)
merge(x = nomesdata, y = finais_resposta, by = c("nom", "Formula")) # Equivalente
nomesdata=data.frame(nom=nomes)
merge(x = nomesdata, y = finais_resposta, by = c("nom", "Formula")) # Equivalente
View(nomesdata)
nomesdata=data.frame(Formula=nomes)
merge(x = nomesdata, y = finais_resposta) # Equivalente
resultado=merge(x = nomesdata, y = finais_resposta) # Equivalente
resultado
View(nomesdata)
names(finais_resposta)
resultado=merge(x = nomesdata, y = finais_resposta,all=FALSE) # Equivalente
resultado=merge(x = nomesdata, y = finais_resposta,BY='Formula',all=FALSE) # Equivalente
resultado=merge(x = nomesdata, y = finais_resposta,BY='Formula',all=FALSE) # Equivalente
resultado=merge(x = nomesdata, y = finais_resposta,BY='Formula',all=FALSE) # Equivalente
finais_resposta$Foemula
finais_resposta$Formula
nomes
intersect(finais_resposta$Formula,nomes)
resultado=merge(x = finais_resposta, y = nomesdata,by='Formula',all=FALSE) # Equivalente
View(resultado)
View(resultado)
View(resultado)
n=length(nomes)
finais_resposta$'Band Gap (eV)'
for (i in 1:n)
resposta[i]=finais_resposta$'Band Gap (eV)'[finais_resposta$Formula==nomes[i]]
resposta=0
for (i in 1:n)
resposta[i]=finais_resposta$'Band Gap (eV)'[finais_resposta$Formula==nomes[i]]
warnings()
for (i in 1:n)
resposta[i]=finais_resposta$'Band Gap (eV)'[sample(finais_resposta$Formula==nomes[i],1)]
resposta
hist(resposta)
for (i in 1:n)
resposta[i]=finais_resposta$'Formation energy (eV)'[sample(finais_resposta$Formula==nomes[i],1)]
for (i in 1:n)
resposta[i]=finais_resposta$'Formation Energy (eV)'[sample(finais_resposta$Formula==nomes[i],1)]
resposta
finais_resposta$Formula==nomes[i]
resposta=0
for (i in 1:n)
resposta[i]=finais_resposta$'Formation Energy (eV)'[sample(finais_resposta$Formula==nomes[i],1)]
respota
resposta
setdiff(nomes,finais_resposta$Formula)
nomes
finais_resposta$Formula
setdiff(nomes,finais_resposta$Formula)
setdiff(nomes,finais_resposta$Formula)
setdiff(nomes,finais_resposta$Formula)
setdiff(nomes,finais_resposta$Formula)
setdiff(nomes,finais_resposta$Formula)
setdiff(nomes,finais_resposta$Formula)
setdiff(nomes,finais_resposta$Formula)
setdiff(nomes,finais_resposta$Formula)
setdiff(nomes,finais_resposta$Formula)
setdiff(nomes,finais_resposta$Formula)
finais_resposta$Formula
setdiff(finais_resposta$Formula,nomes)
for (i in 1:n)
resposta[i]=finais_resposta$'Formation Energy (eV)'[sample(finais_resposta$Formula==nomes[i],1)]
i
finais_resposta$'Formation Energy (eV)'[finais_resposta$Formula==nomes[i]]
resposta[i]=sample(finais_resposta$'Formation Energy (eV)'[finais_resposta$Formula==nomes[i]],1)
for (i in 1:n)
resposta[i]=sample(finais_resposta$'Formation Energy (eV)'[finais_resposta$Formula==nomes[i]],1)
resposta
nomes
setwd("C:/Users/Carlos M Garcia/Dropbox/wences/CODIGO/matlab_crosscov/gretton")
setwd("C:/Users/Carlos M Garcia/Dropbox/wences/CODIGO/matlab_crosscov/gretton")
write.table(resposta, file="enerxia.txt", row.names=FALSE, col.names=FALSE)
